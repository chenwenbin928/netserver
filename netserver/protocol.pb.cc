// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Heart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Logon_SocketType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogonRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogonRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogonRet_SocketType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Heart_descriptor_ = file->message_type(0);
  static const int Heart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, reserve_),
  };
  Heart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heart_descriptor_,
      Heart::default_instance_,
      Heart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heart));
  Logon_descriptor_ = file->message_type(1);
  static const int Logon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, verfiy_),
  };
  Logon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logon_descriptor_,
      Logon::default_instance_,
      Logon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logon));
  Logon_SocketType_descriptor_ = Logon_descriptor_->enum_type(0);
  LogonRet_descriptor_ = file->message_type(2);
  static const int LogonRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRet, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRet, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRet, verfiy_),
  };
  LogonRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogonRet_descriptor_,
      LogonRet::default_instance_,
      LogonRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogonRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogonRet));
  LogonRet_SocketType_descriptor_ = LogonRet_descriptor_->enum_type(0);
  Logout_descriptor_ = file->message_type(3);
  static const int Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, reserve_),
  };
  Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logout_descriptor_,
      Logout::default_instance_,
      Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logout));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heart_descriptor_, &Heart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logon_descriptor_, &Logon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogonRet_descriptor_, &LogonRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logout_descriptor_, &Logout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete Heart::default_instance_;
  delete Heart_reflection_;
  delete Logon::default_instance_;
  delete Logon_reflection_;
  delete LogonRet::default_instance_;
  delete LogonRet_reflection_;
  delete Logout::default_instance_;
  delete Logout_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\010protocol\"\030\n\005Heart\022\017\n\007r"
    "eserve\030\001 \001(\t\"V\n\005Logon\022\014\n\004user\030\001 \002(\t\022\014\n\004p"
    "ass\030\002 \002(\t\022\016\n\006verfiy\030\003 \001(\t\"!\n\nSocketType\022"
    "\n\n\006Normal\020\000\022\007\n\003SSL\020\001\"Y\n\010LogonRet\022\014\n\004user"
    "\030\001 \002(\t\022\014\n\004pass\030\002 \002(\t\022\016\n\006verfiy\030\003 \001(\t\"!\n\n"
    "SocketType\022\n\n\006Normal\020\000\022\007\n\003SSL\020\001\"\031\n\006Logou"
    "t\022\017\n\007reserve\030\001 \001(\t", 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  Heart::default_instance_ = new Heart();
  Logon::default_instance_ = new Logon();
  LogonRet::default_instance_ = new LogonRet();
  Logout::default_instance_ = new Logout();
  Heart::default_instance_->InitAsDefaultInstance();
  Logon::default_instance_->InitAsDefaultInstance();
  LogonRet::default_instance_->InitAsDefaultInstance();
  Logout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;


// ===================================================================

const ::std::string Heart::_default_reserve_;
#ifndef _MSC_VER
const int Heart::kReserveFieldNumber;
#endif  // !_MSC_VER

Heart::Heart()
  : Message() {
  SharedCtor();
}

void Heart::InitAsDefaultInstance() {
}

Heart::Heart(const Heart& from)
  : Message() {
  SharedCtor();
  MergeFrom(from);
}

void Heart::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = const_cast< ::std::string*>(&_default_reserve_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heart::~Heart() {
  SharedDtor();
}

void Heart::SharedDtor() {
  if (reserve_ != &_default_reserve_) {
    delete reserve_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Heart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heart_descriptor_;
}

const Heart& Heart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

Heart* Heart::default_instance_ = NULL;

Heart* Heart::New() const {
  return new Heart;
}

void Heart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (reserve_ != &_default_reserve_) {
        reserve_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_reserve()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->reserve().data(), this->reserve().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Heart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Heart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string reserve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reserve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Heart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string reserve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reserve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Heart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Heart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heart::MergeFrom(const Heart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reserve(from.reserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart::CopyFrom(const Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart::IsInitialized() const {
  
  return true;
}

void Heart::Swap(Heart* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heart_descriptor_;
  metadata.reflection = Heart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Logon_SocketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logon_SocketType_descriptor_;
}
bool Logon_SocketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Logon_SocketType Logon::Normal;
const Logon_SocketType Logon::SSL;
const Logon_SocketType Logon::SocketType_MIN;
const Logon_SocketType Logon::SocketType_MAX;
#endif  // _MSC_VER
const ::std::string Logon::_default_user_;
const ::std::string Logon::_default_pass_;
const ::std::string Logon::_default_verfiy_;
#ifndef _MSC_VER
const int Logon::kUserFieldNumber;
const int Logon::kPassFieldNumber;
const int Logon::kVerfiyFieldNumber;
#endif  // !_MSC_VER

Logon::Logon()
  : Message() {
  SharedCtor();
}

void Logon::InitAsDefaultInstance() {
}

Logon::Logon(const Logon& from)
  : Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logon::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  pass_ = const_cast< ::std::string*>(&_default_pass_);
  verfiy_ = const_cast< ::std::string*>(&_default_verfiy_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logon::~Logon() {
  SharedDtor();
}

void Logon::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (pass_ != &_default_pass_) {
    delete pass_;
  }
  if (verfiy_ != &_default_verfiy_) {
    delete verfiy_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Logon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logon_descriptor_;
}

const Logon& Logon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

Logon* Logon::default_instance_ = NULL;

Logon* Logon::New() const {
  return new Logon;
}

void Logon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pass_ != &_default_pass_) {
        pass_->clear();
      }
    }
    if (_has_bit(2)) {
      if (verfiy_ != &_default_verfiy_) {
        verfiy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user().data(), this->user().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }
      
      // required string pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pass:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pass()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pass().data(), this->pass().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_verfiy;
        break;
      }
      
      // optional string verfiy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_verfiy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_verfiy()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->verfiy().data(), this->verfiy().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Logon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string pass = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pass(), output);
  }
  
  // optional string verfiy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verfiy().data(), this->verfiy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->verfiy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string pass = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }
  
  // optional string verfiy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verfiy().data(), this->verfiy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->verfiy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }
    
    // optional string verfiy = 3;
    if (has_verfiy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verfiy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Logon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logon::MergeFrom(const Logon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_pass(from.pass());
    }
    if (from._has_bit(2)) {
      set_verfiy(from.verfiy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logon::CopyFrom(const Logon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Logon::Swap(Logon* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(pass_, other->pass_);
    std::swap(verfiy_, other->verfiy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logon_descriptor_;
  metadata.reflection = Logon_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogonRet_SocketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogonRet_SocketType_descriptor_;
}
bool LogonRet_SocketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogonRet_SocketType LogonRet::Normal;
const LogonRet_SocketType LogonRet::SSL;
const LogonRet_SocketType LogonRet::SocketType_MIN;
const LogonRet_SocketType LogonRet::SocketType_MAX;
#endif  // _MSC_VER
const ::std::string LogonRet::_default_user_;
const ::std::string LogonRet::_default_pass_;
const ::std::string LogonRet::_default_verfiy_;
#ifndef _MSC_VER
const int LogonRet::kUserFieldNumber;
const int LogonRet::kPassFieldNumber;
const int LogonRet::kVerfiyFieldNumber;
#endif  // !_MSC_VER

LogonRet::LogonRet()
  : Message() {
  SharedCtor();
}

void LogonRet::InitAsDefaultInstance() {
}

LogonRet::LogonRet(const LogonRet& from)
  : Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogonRet::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  pass_ = const_cast< ::std::string*>(&_default_pass_);
  verfiy_ = const_cast< ::std::string*>(&_default_verfiy_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogonRet::~LogonRet() {
  SharedDtor();
}

void LogonRet::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (pass_ != &_default_pass_) {
    delete pass_;
  }
  if (verfiy_ != &_default_verfiy_) {
    delete verfiy_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LogonRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogonRet_descriptor_;
}

const LogonRet& LogonRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

LogonRet* LogonRet::default_instance_ = NULL;

LogonRet* LogonRet::New() const {
  return new LogonRet;
}

void LogonRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pass_ != &_default_pass_) {
        pass_->clear();
      }
    }
    if (_has_bit(2)) {
      if (verfiy_ != &_default_verfiy_) {
        verfiy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogonRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user().data(), this->user().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }
      
      // required string pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pass:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pass()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pass().data(), this->pass().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_verfiy;
        break;
      }
      
      // optional string verfiy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_verfiy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_verfiy()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->verfiy().data(), this->verfiy().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogonRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    LogonRet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // required string pass = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pass(), output);
  }
  
  // optional string verfiy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verfiy().data(), this->verfiy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->verfiy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogonRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // required string pass = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }
  
  // optional string verfiy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verfiy().data(), this->verfiy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->verfiy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogonRet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }
    
    // optional string verfiy = 3;
    if (has_verfiy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verfiy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void LogonRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogonRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogonRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogonRet::MergeFrom(const LogonRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_pass(from.pass());
    }
    if (from._has_bit(2)) {
      set_verfiy(from.verfiy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogonRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonRet::CopyFrom(const LogonRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LogonRet::Swap(LogonRet* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(pass_, other->pass_);
    std::swap(verfiy_, other->verfiy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogonRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogonRet_descriptor_;
  metadata.reflection = LogonRet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Logout::_default_reserve_;
#ifndef _MSC_VER
const int Logout::kReserveFieldNumber;
#endif  // !_MSC_VER

Logout::Logout()
  : Message() {
  SharedCtor();
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = const_cast< ::std::string*>(&_default_reserve_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logout::~Logout() {
  SharedDtor();
}

void Logout::SharedDtor() {
  if (reserve_ != &_default_reserve_) {
    delete reserve_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();  return *default_instance_;
}

Logout* Logout::default_instance_ = NULL;

Logout* Logout::New() const {
  return new Logout;
}

void Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (reserve_ != &_default_reserve_) {
        reserve_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_reserve()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->reserve().data(), this->reserve().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Logout::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string reserve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reserve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string reserve = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reserve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reserve(from.reserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  
  return true;
}

void Logout::Swap(Logout* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}


}  // namespace protocol
