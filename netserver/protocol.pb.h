// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class Heart;
class Logon;
class LogonRet;
class Logout;

enum Logon_SocketType {
  Logon_SocketType_Normal = 0,
  Logon_SocketType_SSL = 1
};
bool Logon_SocketType_IsValid(int value);
const Logon_SocketType Logon_SocketType_SocketType_MIN = Logon_SocketType_Normal;
const Logon_SocketType Logon_SocketType_SocketType_MAX = Logon_SocketType_SSL;

const ::google::protobuf::EnumDescriptor* Logon_SocketType_descriptor();
inline const ::std::string& Logon_SocketType_Name(Logon_SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Logon_SocketType_descriptor(), value);
}
inline bool Logon_SocketType_Parse(
    const ::std::string& name, Logon_SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Logon_SocketType>(
    Logon_SocketType_descriptor(), name, value);
}
enum LogonRet_SocketType {
  LogonRet_SocketType_Normal = 0,
  LogonRet_SocketType_SSL = 1
};
bool LogonRet_SocketType_IsValid(int value);
const LogonRet_SocketType LogonRet_SocketType_SocketType_MIN = LogonRet_SocketType_Normal;
const LogonRet_SocketType LogonRet_SocketType_SocketType_MAX = LogonRet_SocketType_SSL;

const ::google::protobuf::EnumDescriptor* LogonRet_SocketType_descriptor();
inline const ::std::string& LogonRet_SocketType_Name(LogonRet_SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogonRet_SocketType_descriptor(), value);
}
inline bool LogonRet_SocketType_Parse(
    const ::std::string& name, LogonRet_SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogonRet_SocketType>(
    LogonRet_SocketType_descriptor(), name, value);
}
// ===================================================================

class Heart : public ::google::protobuf::Message {
 public:
  Heart();
  virtual ~Heart();
  
  Heart(const Heart& from);
  
  inline Heart& operator=(const Heart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Heart& default_instance();
  void Swap(Heart* other);
  
  // implements Message ----------------------------------------------
  
  Heart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heart& from);
  void MergeFrom(const Heart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline const ::std::string& reserve() const;
  inline void set_reserve(const ::std::string& value);
  inline void set_reserve(const char* value);
  inline void set_reserve(const char* value, size_t size);
  inline ::std::string* mutable_reserve();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* reserve_;
  static const ::std::string _default_reserve_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Heart* default_instance_;
};
// -------------------------------------------------------------------

class Logon : public ::google::protobuf::Message {
 public:
  Logon();
  virtual ~Logon();
  
  Logon(const Logon& from);
  
  inline Logon& operator=(const Logon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logon& default_instance();
  void Swap(Logon* other);
  
  // implements Message ----------------------------------------------
  
  Logon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logon& from);
  void MergeFrom(const Logon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Logon_SocketType SocketType;
  static const SocketType Normal = Logon_SocketType_Normal;
  static const SocketType SSL = Logon_SocketType_SSL;
  static inline bool SocketType_IsValid(int value) {
    return Logon_SocketType_IsValid(value);
  }
  static const SocketType SocketType_MIN =
    Logon_SocketType_SocketType_MIN;
  static const SocketType SocketType_MAX =
    Logon_SocketType_SocketType_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketType_descriptor() {
    return Logon_SocketType_descriptor();
  }
  static inline const ::std::string& SocketType_Name(SocketType value) {
    return Logon_SocketType_Name(value);
  }
  static inline bool SocketType_Parse(const ::std::string& name,
      SocketType* value) {
    return Logon_SocketType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline const ::std::string& pass() const;
  inline void set_pass(const ::std::string& value);
  inline void set_pass(const char* value);
  inline void set_pass(const char* value, size_t size);
  inline ::std::string* mutable_pass();
  
  // optional string verfiy = 3;
  inline bool has_verfiy() const;
  inline void clear_verfiy();
  static const int kVerfiyFieldNumber = 3;
  inline const ::std::string& verfiy() const;
  inline void set_verfiy(const ::std::string& value);
  inline void set_verfiy(const char* value);
  inline void set_verfiy(const char* value, size_t size);
  inline ::std::string* mutable_verfiy();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* pass_;
  static const ::std::string _default_pass_;
  ::std::string* verfiy_;
  static const ::std::string _default_verfiy_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Logon* default_instance_;
};
// -------------------------------------------------------------------

class LogonRet : public ::google::protobuf::Message {
 public:
  LogonRet();
  virtual ~LogonRet();
  
  LogonRet(const LogonRet& from);
  
  inline LogonRet& operator=(const LogonRet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogonRet& default_instance();
  void Swap(LogonRet* other);
  
  // implements Message ----------------------------------------------
  
  LogonRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogonRet& from);
  void MergeFrom(const LogonRet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogonRet_SocketType SocketType;
  static const SocketType Normal = LogonRet_SocketType_Normal;
  static const SocketType SSL = LogonRet_SocketType_SSL;
  static inline bool SocketType_IsValid(int value) {
    return LogonRet_SocketType_IsValid(value);
  }
  static const SocketType SocketType_MIN =
    LogonRet_SocketType_SocketType_MIN;
  static const SocketType SocketType_MAX =
    LogonRet_SocketType_SocketType_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketType_descriptor() {
    return LogonRet_SocketType_descriptor();
  }
  static inline const ::std::string& SocketType_Name(SocketType value) {
    return LogonRet_SocketType_Name(value);
  }
  static inline bool SocketType_Parse(const ::std::string& name,
      SocketType* value) {
    return LogonRet_SocketType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  
  // required string pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline const ::std::string& pass() const;
  inline void set_pass(const ::std::string& value);
  inline void set_pass(const char* value);
  inline void set_pass(const char* value, size_t size);
  inline ::std::string* mutable_pass();
  
  // optional string verfiy = 3;
  inline bool has_verfiy() const;
  inline void clear_verfiy();
  static const int kVerfiyFieldNumber = 3;
  inline const ::std::string& verfiy() const;
  inline void set_verfiy(const ::std::string& value);
  inline void set_verfiy(const char* value);
  inline void set_verfiy(const char* value, size_t size);
  inline ::std::string* mutable_verfiy();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* user_;
  static const ::std::string _default_user_;
  ::std::string* pass_;
  static const ::std::string _default_pass_;
  ::std::string* verfiy_;
  static const ::std::string _default_verfiy_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LogonRet* default_instance_;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message {
 public:
  Logout();
  virtual ~Logout();
  
  Logout(const Logout& from);
  
  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();
  void Swap(Logout* other);
  
  // implements Message ----------------------------------------------
  
  Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline const ::std::string& reserve() const;
  inline void set_reserve(const ::std::string& value);
  inline void set_reserve(const char* value);
  inline void set_reserve(const char* value, size_t size);
  inline ::std::string* mutable_reserve();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* reserve_;
  static const ::std::string _default_reserve_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Logout* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Heart

// optional string reserve = 1;
inline bool Heart::has_reserve() const {
  return _has_bit(0);
}
inline void Heart::clear_reserve() {
  if (reserve_ != &_default_reserve_) {
    reserve_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Heart::reserve() const {
  return *reserve_;
}
inline void Heart::set_reserve(const ::std::string& value) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(value);
}
inline void Heart::set_reserve(const char* value) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(value);
}
inline void Heart::set_reserve(const char* value, size_t size) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Heart::mutable_reserve() {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  return reserve_;
}

// -------------------------------------------------------------------

// Logon

// required string user = 1;
inline bool Logon::has_user() const {
  return _has_bit(0);
}
inline void Logon::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Logon::user() const {
  return *user_;
}
inline void Logon::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Logon::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Logon::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logon::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string pass = 2;
inline bool Logon::has_pass() const {
  return _has_bit(1);
}
inline void Logon::clear_pass() {
  if (pass_ != &_default_pass_) {
    pass_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Logon::pass() const {
  return *pass_;
}
inline void Logon::set_pass(const ::std::string& value) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void Logon::set_pass(const char* value) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void Logon::set_pass(const char* value, size_t size) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logon::mutable_pass() {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  return pass_;
}

// optional string verfiy = 3;
inline bool Logon::has_verfiy() const {
  return _has_bit(2);
}
inline void Logon::clear_verfiy() {
  if (verfiy_ != &_default_verfiy_) {
    verfiy_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Logon::verfiy() const {
  return *verfiy_;
}
inline void Logon::set_verfiy(const ::std::string& value) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(value);
}
inline void Logon::set_verfiy(const char* value) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(value);
}
inline void Logon::set_verfiy(const char* value, size_t size) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logon::mutable_verfiy() {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  return verfiy_;
}

// -------------------------------------------------------------------

// LogonRet

// required string user = 1;
inline bool LogonRet::has_user() const {
  return _has_bit(0);
}
inline void LogonRet::clear_user() {
  if (user_ != &_default_user_) {
    user_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& LogonRet::user() const {
  return *user_;
}
inline void LogonRet::set_user(const ::std::string& value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LogonRet::set_user(const char* value) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LogonRet::set_user(const char* value, size_t size) {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogonRet::mutable_user() {
  _set_bit(0);
  if (user_ == &_default_user_) {
    user_ = new ::std::string;
  }
  return user_;
}

// required string pass = 2;
inline bool LogonRet::has_pass() const {
  return _has_bit(1);
}
inline void LogonRet::clear_pass() {
  if (pass_ != &_default_pass_) {
    pass_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& LogonRet::pass() const {
  return *pass_;
}
inline void LogonRet::set_pass(const ::std::string& value) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void LogonRet::set_pass(const char* value) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(value);
}
inline void LogonRet::set_pass(const char* value, size_t size) {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  pass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogonRet::mutable_pass() {
  _set_bit(1);
  if (pass_ == &_default_pass_) {
    pass_ = new ::std::string;
  }
  return pass_;
}

// optional string verfiy = 3;
inline bool LogonRet::has_verfiy() const {
  return _has_bit(2);
}
inline void LogonRet::clear_verfiy() {
  if (verfiy_ != &_default_verfiy_) {
    verfiy_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& LogonRet::verfiy() const {
  return *verfiy_;
}
inline void LogonRet::set_verfiy(const ::std::string& value) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(value);
}
inline void LogonRet::set_verfiy(const char* value) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(value);
}
inline void LogonRet::set_verfiy(const char* value, size_t size) {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  verfiy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogonRet::mutable_verfiy() {
  _set_bit(2);
  if (verfiy_ == &_default_verfiy_) {
    verfiy_ = new ::std::string;
  }
  return verfiy_;
}

// -------------------------------------------------------------------

// Logout

// optional string reserve = 1;
inline bool Logout::has_reserve() const {
  return _has_bit(0);
}
inline void Logout::clear_reserve() {
  if (reserve_ != &_default_reserve_) {
    reserve_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Logout::reserve() const {
  return *reserve_;
}
inline void Logout::set_reserve(const ::std::string& value) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(value);
}
inline void Logout::set_reserve(const char* value) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(value);
}
inline void Logout::set_reserve(const char* value, size_t size) {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  reserve_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logout::mutable_reserve() {
  _set_bit(0);
  if (reserve_ == &_default_reserve_) {
    reserve_ = new ::std::string;
  }
  return reserve_;
}


}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Logon_SocketType>() {
  return ::protocol::Logon_SocketType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::LogonRet_SocketType>() {
  return ::protocol::LogonRet_SocketType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
